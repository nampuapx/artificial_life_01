
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж=][]
 // берёт число возврат-строка
fn n2s( $n )
 {
  $s=""
  num2str( $s, $n )
  ret( $s)
 } 
 
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
// -- получение Х-координаты рядом        ---------
//  с био по относительному направлению  ----------
// in - номер био, направление       --------------
// out - X -  координата             --------------

   fn X_from_vektor_r( $bot, $n )
    {   $x=bots[$bot,X_COORD] 
        $n=$n+bots[$bot, DIRECT ]
        if ($n > 7) { $n=$n-8 }
        if ( $n==0 || $n==6 || $n==7 ) 
           { $x=$x-1
             if $x<0 { $x = 179 }
           }
        else { if( $n==2 || $n==3 || $n==4 ) 
                  { $x=$x+1 
                    if $x>179 { $x = 0 }
                  } 
             }
        ret( $x )
    }
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
// -- получение Х-координаты рядом        ---------
//  с био по абсолютному направлению     ----------
// in - номер био, направление       --------------
// out - X -  координата             --------------

   fn X_from_vektor_a( $bot, $n )
    {   $x=bots[$bot,X_COORD] 
        if ( $n==0 || $n==6 || $n==7 ) 
           { $x=$x-1
             if $x<0 { $x = 179 }
           }
        else { if( $n==2 || $n==3 || $n==4 ) 
                  { $x=$x+1 
                    if $x>179 { $x = 0 }
                  } 
             }
        ret( $x )
    }
        
//жжжжжжжжжжжжхжжжжжхжжжжжжхжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж  
// ------ получение Y-координаты рядом              ---------
// ---- Y координата по относительному направлению  ----------
// ---  in - номер бота, направление              ------------
// ---  out - Y -  координата                    -------------
   fn Y_from_vektor_r( $bot, $n )
	{   $y=bots[$bot,Y_COORD] 
        $n=$n+bots[$bot, DIRECT ]
        if ( $n>7 ) { $n=$n-8 }
        if ( $n<3 ) { $y=$y-1 }
        else { if( $n==4 || $n==5 || $n==6 ) { $y=$y+1 } }
        ret( $y )
	}    
//жжжжжжжжжжжжхжжжжжхжжжжжжхжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж  
// ------ получение Y-координаты рядом              ---------
// ---- Y координата по абсолютному направлению     ----------
// ---  in - номер бота, направление              ------------
// ---  out - Y -  координата                    -------------
   fn Y_from_vektor_a( $bot, $n )
    {   $y=bots[$bot,Y_COORD] 
        if ( $n<3 ) { $y=$y-1 }
        else { if( $n==4 || $n==5 || $n==6 ) { $y=$y+1 } }
        ret( $y )
    }  

//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//===========   окружен ли бот          ==========
// ---  in - номер бота                 ------------
//===== out  1-окружен  2-нет           ===
 fn full_aroud($bot)
 { 
   $i=0
   while $i<8
   {
	 $x = X_from_vektor_r( $bot, $i )
     $y = Y_from_vektor_r( $bot, $i )
	 if ( world[$x,$y] ==  WC_EMPTY )  { ret(2) }
	 $i = $i + 1
   }
	 ret(1)
 }
 
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//===========   если что то там         ==========
//===== in  - bot и  относительное направление ===
//===== out - содержимое указанной ячейки      ===
//=====  из массива world - номер бота         ===
//=====  или 0-пустой   или 20000-стена        ===
 fn is_anything_there_r($bot,$dr)
  {
     $x = X_from_vektor_r( $bot, $dr )
     $y = Y_from_vektor_r( $bot, $dr )
	 $result = world[$x,$y]
     ret( $result ) 
  }    
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//===========   если что то там         ==========
//===== in  - bot и  абсолютному  направление ===
//===== out - содержимое указанной ячейки      ===
//=====  из массива world - номер бота         ===
//=====  или 0-пустой   или 20000-стена        ===
 fn is_anything_there_a($bot,$dr)
  {
     $x = X_from_vektor_a( $bot, $dr )
     $y = Y_from_vektor_a( $bot, $dr )
   	 $result = world[$x,$y]
     ret( $result )  
  }   
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж  
//==== ищет свободные ячейки вокруг бота ============
//==== начинает спереди и дальше по      ============
//==== кругу через низ    ( world )      ============
//==== in  - номер бота                  ============
//==== out - номер направление или       ============
//====  или 8 , если свободных нет       ============
 fn find_empty_direction( $bot )
    {
      $i=0
      while $i<8
       {
          $x = X_from_vektor_r( $bot, $i )
          $y = Y_from_vektor_r( $bot, $i )
          if ( world[ $x,$y ] == WC_EMPTY ) { ret($i) }
          $i=$i+1
        }
    //........no empty..........
      ret(8)
    }
  
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//=====  поиск свободной ячейки в массиве bots   ========
//=====  возвращает номер свободной ячейки или 0 ========
  fn  find_empty() 
  {
     $i=1
     while ( $i < MAX_BOTS_COUNT )
     {
       if ( bots[ $i, LIVING ] == LV_FREE )    { ret($i) }
       $i=$i+1
     }   
     ret(0)
  }
   
  
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
// -- увеличение адреса команды   --------------
//  in - номер bot, насколько прибавить адрес --
 
 fn bot_inc_command_address( $bot, $a )
    {
      $adr=bots[$bot,ADR]+$a
      if ($adr >= MIND_SIZE ) { $adr = $adr - MIND_SIZE }
      bots[$bot,ADR]=$adr
    }

//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
// -- получение параметра для команды   --------------
//  in - номер bot
// out - возвращает число из днк, следующее за выполняемой командой 
 fn bot_get_param( $bot )
    {
      $adr=bots[$bot,ADR]+1
      if ($adr >= MIND_SIZE ) { $adr = $adr - MIND_SIZE }
      ret( bots[ $bot,$adr] ) // возвращает число, следующее за выполняемой командой
    }
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//---- косвенное увеличение адреса команды   --------------
//---- in - номер bot, смещение до команды,  --------------
//---- которая станет смещением              --------------
  fn bot_indirect_inc_cmd_address( $bot, $a )
     {
          $adr= bots[$bot,ADR] 
          $adr=$adr+$a
          if ( $adr >= MIND_SIZE ) { $adr = $adr - MIND_SIZE }
          $bias= bots[$bot,$adr]
          bot_inc_command_address( $bot, $bias )
     }

//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//===== перемещает бота в нужную точку  ==============
//===== без проверок                    ==============
//===== in - номер бота и новые координаты ===========
fn move_bot( $bot, $x, $y )
   {
       world[$x,$y] = $bot
       world[ bots[$bot, X_COORD] , bots[$bot, Y_COORD] ] = WC_EMPTY
       bots[ $bot, X_COORD ] = $x
       bots[ $bot, Y_COORD ] = $y
   }
   
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//=====   удаление бота        =============
//=====  in - номер бота       =============
 fn delete_bot( $bot )
   {
      world[ bots[ $bot, X_COORD ], bots[ $bot, Y_COORD ] ] = WC_EMPTY // удаление бота с карты
      bots[ bots[$bot, PREV] , NEXT ] = bots[ $bot , NEXT ]            // удаление бота из цепочки
      bots[ bots[$bot, NEXT] , PREV ] = bots[ $bot , PREV ]            // связывающей всех ботов
	  $pbot = bots[ $bot, MPREV ]
	  $nbot = bots[ $bot, MNEXT ]
      if ( $pbot > 0 ){ bots[ $pbot, MNEXT ] = 0 }                     // удаление из многоклеточной
      if ( $nbot > 0 ){ bots[ $nbot, MPREV ] = 0 }	                   // цепочки
	  bots[ $bot, MPREV ]=0 bots[ $bot, MNEXT ]=0 
      bots[ $bot , LIVING ] = LV_FREE                                  // отметим в массиве bots[], что место свободно                 
   }
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж 
//=====  превращение бота в органику    =========== 
//=====  in - номер бота                =========== 
 fn bot2organic($bot)
  {   bots[ $bot, LIVING ] = LV_ORGANIC_SINK       // отметим в массиве bots[], что бот - тонущая органика
	  $pbot = bots[ $bot, MPREV ]
	  $nbot = bots[ $bot, MNEXT ]
      if ( $pbot > 0 ){ bots[ $pbot, MNEXT ] = 0 } // удаление бота из многоклеточной цепочки
      if ( $nbot > 0 ){ bots[ $nbot, MPREV ] = 0 }
      bots[ $bot, MPREV ]=0 bots[ $bot, MNEXT ]=0
  }
  
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//========   нахожусь ли я в многоклеточной цепочке  =====
//========   in - номер бота                         =====
//========   out- 0 - нет, 1 - есть MPREV, 2 - есть MNEXT, 3 есть MPREV и MNEXT  
  fn isMulti($bot)
  {  
    $a = 0
    if ( bots[ $bot, MPREV ]>0 ) { $a = 1  }
	if ( bots[ $bot, MNEXT ]>0 ) { $a=$a+2 }
	ret($a)
  }
  
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//========   копиться ли энергия            =====
//========   in - номер бота                =====
//========   out- 1 - да, 2 - нет           ===== 
   fn is_health_grow($bot)
  { 
       if ( bots[ $bot , MINERAL ] < 100 )           { $t = 0 }
         else {
                 if ( bots[ $bot , MINERAL ] < 400 ) { $t = 1 }
                 else                                { $t = 2 }
              }
         $hlt = season - ( (bots[ $bot , Y_COORD ]-1) div 6 ) + $t
		if ($hlt>=3) { ret(1) }
		else         { ret(2) }
   }
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//========   родственники ли боты?              =====
//========   in - номер 1 бота , номер 2 бота   =====
//========   out- 0 - нет, 1 - да               =====  
 fn is_relative( $bot0 , $bot1 )
   {    if ( bots[$bot1, LIVING] < LV_ALIVE ) { ret(0) }
         $dif=0    // счетчик несовпадений в геноме
          $i=0
        while ( $i< MIND_SIZE )
          { 
            if (bots[$bot0,$i] != bots[$bot1,$i])
             { 
                 $dif = $dif + 1
                 if ( $dif == 2 ) { ret(0) } // если несовпадений в генеме больше 1
             }                               // то боты не родственики
            $i=$i+1 
          }
       ret(1) 
   }

//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//=== делаем бота более зеленым на экране         ======
//=== in - номер бота, на сколько озеленить       ======
 fn go_GREEN($bot,$num) 
 {  // добавляем зелени
    bots[ $bot , C_GREEN ] = bots[ $bot , C_GREEN ] + $num   
    if ( bots[ $bot , C_GREEN ] >255 ) { bots[ $bot , C_GREEN ] = 255 }  
	$nm=$num div 2 
	// убавляем красноту
    bots[ $bot , C_RED ] = bots[ $bot , C_RED ] - $nm
     if ( bots[ $bot , C_RED ] < 0 )
      {  bots[ $bot , C_BLUE ] = bots[ $bot , C_BLUE ] +  bots[ $bot , C_RED ]  }
    // убавляем синеву
    bots[ $bot , C_BLUE ] = bots[ $bot , C_BLUE ] - $nm
      if ( bots[ $bot ,  C_BLUE ] < 0 )
      {  bots[ $bot ,  C_RED ] = bots[ $bot , C_RED ] +  bots[ $bot , C_BLUE ]  } 
    
    if ( bots[ $bot , C_BLUE ] < 0 )  { bots[ $bot , C_BLUE ] = 0 } 	
    if ( bots[ $bot , C_RED ] < 0 )  { bots[ $bot , C_RED ] = 0 } 
 } 
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//=== делаем бота более синим на экране         ======
//=== in - номер бота, на сколько осинить       ======
  fn go_BLUE($bot,$num) 
 {  // добавляем синевы 
    bots[ $bot , C_BLUE ] = bots[ $bot , C_BLUE ] + $num
    if ( bots[ $bot , C_BLUE ] >255 ) { bots[ $bot , C_BLUE ] = 255 } 
    $nm=$num div 2
	// убавляем зеленоту
    bots[ $bot , C_GREEN ] = bots[ $bot , C_GREEN ] - $nm
      if ( bots[ $bot ,  C_GREEN ] < 0 )
      {  bots[ $bot ,  C_RED ] = bots[ $bot , C_RED ] +  bots[ $bot , C_GREEN ]  } 
    // убавляем красноту
    bots[ $bot , C_RED ] = bots[ $bot , C_RED ] - $nm
     if ( bots[ $bot , C_RED ] < 0 )
      {  bots[ $bot , C_GREEN ] = bots[ $bot , C_GREEN ] +  bots[ $bot , C_RED ]  }
      
    if ( bots[ $bot , C_GREEN ] < 0 )  { bots[ $bot , C_GREEN ] = 0 } 
    if ( bots[ $bot , C_RED ] < 0 )  { bots[ $bot , C_RED ] = 0 } 	
 }    
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж 
//=== делаем бота более красным на экране         ======
//=== in - номер бота, на сколько осинить       ======
 fn go_RED($bot,$num) 
 {   // добавляем красноты
    bots[ $bot , C_RED ] = bots[ $bot , C_RED ] + $num 
    if ( bots[ $bot , C_RED ] >255 ) { bots[ $bot , C_RED ] = 255 }    
	$nm=$num div 2 
	// убавляем зеленоту
    bots[ $bot , C_GREEN ] = bots[ $bot , C_GREEN ] - $nm
      if ( bots[ $bot ,  C_GREEN ] < 0 )
      {  bots[ $bot ,  C_BLUE ] = bots[ $bot , C_BLUE ] +  bots[ $bot , C_GREEN ]  }  
    // убавляем синеву
    bots[ $bot , C_BLUE ] = bots[ $bot , C_BLUE ] - $nm
     if ( bots[ $bot ,  C_BLUE ] < 0 )
      {  bots[ $bot ,  C_GREEN ] = bots[ $bot , C_GREEN ] +  bots[ $bot , C_BLUE ]  } 

    if ( bots[ $bot , C_GREEN ] < 0 )  { bots[ $bot , C_GREEN ] = 0 } 
    if ( bots[ $bot , C_BLUE ] < 0 )  { bots[ $bot , C_BLUE ] = 0 } 	
 }
 
//жжжжжжжжжжжжжжжжжжжхжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//=== радиация, которая действует на ботов в самом верхнем слое мира ====
//=== у них каждый ход меняется случайным образом один ген           ====
//=== добавленно для ускорения эволюции
 fn radiation() 
 {
	 $x=0
   while ( $x < WORLD_WIDTH ) 
      { 
         $bot = world[$x,1] 
		 if( $bot > 0 )
		 {
		   if ( bots[ $bot , LIVING ] == LV_ALIVE )
		   {   
	         $ma= rand() div 520   // 0..63
             $mc= rand() div 520   // 0,,63
             bots[$bot ,$ma]=$mc
		   } 
		 }
		$x=$x+1
	  }
 }

 //ЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖЖж
 // сохраняем скриншот
fn savePNG()
{
	ZOOM_TEMP = ZOOM             ZOOM = 4      // сохраняем положение карты, зум и режим отображения,
    TP_TEMP = TP                 TP = 0        // которые сейчас действуют, в переменные
    LFT_TEMP = LFT               LFT = 0       // и выставляем все в значения по умолчанию
	ViewState_TEMP = ViewState   ViewState = 0	
    paint()                                    // отрисовать всё с этими настройками
	num_to_str(str,file_name)                  // генерируем имя для нового файла
	strcat(str, format )
	save(0,str,FORMAT_PNG)                     // сохраняем  стандартный режим
	file_name= file_name + 1        
	ViewState = 1                              // а теперь всё то же самое, но в режиме эноргии
    paint()
    num_to_str(str,file_eman)
    strcat(str, format )
    save(0,str,FORMAT_PNG)
    file_eman= file_eman + 1		
		
	savef=cadrov        LFT = LFT_TEMP          // записываем в счётчик, сколько кадров до следующего сохранения
    TP = TP_TEMP        ZOOM = ZOOM_TEMP        // и возвращаем все настройки в исходное состояние
    ViewState = ViewState_TEMP
}


 
 //wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
 // счетчики для отладки.  debug
 fn foo0plus()
 {
 	foo0 = foo0 + 1
	if foo0 == 1000000 { foo0 = 0 }
 }
 fn foo1plus()
 {
 	foo1 = foo1 + 1
	if foo1 == 1000000 { foo1 = 0 }
 }
 fn foo2plus()
 {
 	foo2 = foo2 + 1
	if foo2 == 1000000 { foo2 = 0 }
 }
